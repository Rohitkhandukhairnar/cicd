name: React Native iOS Development Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ios-development-build:
    name: Build Development IPA
    runs-on: macos-latest
    env:
      NODE_VERSION: '20'

    steps:
      # Clean derived data
      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/CocoaPods

      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install npm dependencies
      - name: Install npm dependencies
        run: npm install

      # Install CocoaPods
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod --version

      # FIX: Add bundle identifiers to React Native Pods before installation
      - name: Fix Podfile for React Native Pods
        run: |
          cd ios
          # Create a backup of Podfile
          cp Podfile Podfile.backup
          
          # Add post_install hook to set bundle identifiers for React Native Pods
          cat >> Podfile << 'EOF'

          # Fix for React Native Pods missing bundle identifiers
          post_install do |installer|
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                # Set bundle identifier for React Native Pods that are missing it
                if target.product_type == 'com.apple.product-type.bundle'
                  config.build_settings['PRODUCT_BUNDLE_IDENTIFIER'] = 'org.reactjs.native.$(PRODUCT_NAME:rfc1034identifier)'
                elsif target.name.start_with?('React-') || target.name.start_with?('RCT') || target.name.start_with?('FB')
                  config.build_settings['PRODUCT_BUNDLE_IDENTIFIER'] = 'org.reactjs.native.$(PRODUCT_NAME:rfc1034identifier)'
                end
              end
            end
          end
          EOF
          
          echo "‚úÖ Added bundle identifier fix to Podfile"

      # Install CocoaPods dependencies
      - name: Install Pods
        run: |
          cd ios
          pod install --repo-update

      # Alternative fix: Update Podfile with proper settings
      - name: Ensure Proper Podfile Configuration
        run: |
          cd ios
          # Check if Podfile has proper settings
          if ! grep -q "use_frameworks!" Podfile; then
            echo "Adding use_frameworks! to Podfile..."
            sed -i '' '1i\'$'\n''use_frameworks! :linkage => :static'$'\n' Podfile
          fi

      # FIX: Set bundle identifiers in Xcode project for Pods
      - name: Fix Pods Project Bundle Identifiers
        run: |
          cd ios
          echo "Fixing bundle identifiers in Pods project..."
          
          # This command ensures all Pods have bundle identifiers
          xcodebuild -project Pods/Pods.xcodeproj -list | grep -v "Information" | while read target; do
            if [[ ! -z "$target" && "$target" != "The project named" ]]; then
              echo "Processing target: $target"
            fi
          done || true
          
          # Alternative: Use xcodebuild to update settings
          /usr/libexec/PlistBuddy -c "Print" Pods/Pods.xcodeproj/project.pbxproj > /dev/null 2>&1 || echo "Pods project exists"

      # Decode Development Provisioning Profile
      - name: Decode Development Provisioning Profile
        env:
          IOS_DEVELOPMENT_PROFILE_BASE64: ${{ secrets.IOS_DEVELOPMENT_PROFILE_BASE64 }}
          APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
        run: |
          echo "üìã Decoding development provisioning profile..."
          echo "$IOS_DEVELOPMENT_PROFILE_BASE64" | base64 --decode > dev_profile.mobileprovision
          security cms -D -i dev_profile.mobileprovision > dev_profile.plist
          DEV_PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" dev_profile.plist)
          DEV_PROFILE_TEAM_ID=$(/usr/libexec/PlistBuddy -c "Print :TeamIdentifier:0" dev_profile.plist)
          echo "DEV_PROFILE_UUID=$DEV_PROFILE_UUID" >> $GITHUB_ENV
          echo "DEV_PROFILE_TEAM_ID=$DEV_PROFILE_TEAM_ID" >> $GITHUB_ENV
          echo "‚úÖ Development Profile UUID: $DEV_PROFILE_UUID"
          echo "‚úÖ Team ID from Profile: $DEV_PROFILE_TEAM_ID"

      # Setup Development Code Signing
      - name: Setup Development Code Signing
        env:
          IOS_DEVELOPMENT_CERTIFICATE_BASE64: ${{ secrets.IOS_DEVELOPMENT_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: |
          set -euo pipefail
          echo "üîê Setting up development code signing..."
          
          # Delete existing keychain if any
          security delete-keychain dev.keychain || true
          
          # Create new keychain
          security create-keychain -p "$IOS_CERTIFICATE_PASSWORD" dev.keychain
          security default-keychain -s dev.keychain
          security unlock-keychain -p "$IOS_CERTIFICATE_PASSWORD" dev.keychain
          security set-keychain-settings -t 3600 -u dev.keychain
          
          # Import DEVELOPMENT certificate
          echo "üì¶ Importing development certificate..."
          echo "$IOS_DEVELOPMENT_CERTIFICATE_BASE64" | base64 --decode > dev_certificate.p12
          security import dev_certificate.p12 -k dev.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          
          # Configure keychain properly
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$IOS_CERTIFICATE_PASSWORD" dev.keychain
          security list-keychains -s dev.keychain
          
          # Verify certificate
          echo "üîç Verifying certificate..."
          security find-identity -v -p codesigning dev.keychain

      # Install Development Profile
      - name: Install Development Provisioning Profile
        run: |
          echo "üì± Installing development provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp dev_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$DEV_PROFILE_UUID.mobileprovision"
          echo "‚úÖ Development profile installed"

      # Fix Bundle Identifier in Xcode project
      - name: Fix Bundle Identifier
        env:
          APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
          APP_TEAM_ID: ${{ secrets.APP_TEAM_ID }}
        run: |
          cd ios
          echo "üîß Fixing bundle identifier: $APP_BUNDLE_ID"
          
          # Use sed to update bundle identifier
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = \"$APP_BUNDLE_ID\";/g" cicddemo.xcodeproj/project.pbxproj
          sed -i '' "s/DEVELOPMENT_TEAM = [^;]*;/DEVELOPMENT_TEAM = \"$APP_TEAM_ID\";/g" cicddemo.xcodeproj/project.pbxproj
          
          echo "‚úÖ Bundle identifier updated"

      # FIX: Ensure all Pods have bundle identifiers before building
      - name: Pre-build Pods Validation
        run: |
          cd ios
          echo "üîç Validating Pods configuration..."
          
          # Create a script to fix Pods bundle identifiers
          cat > fix_pods_bundle_ids.rb << 'EOF'
          require 'xcodeproj'

          project_path = 'Pods/Pods.xcodeproj'
          project = Xcodeproj::Project.open(project_path)

          project.targets.each do |target|
            target.build_configurations.each do |config|
              # Only set if missing or empty
              if config.build_settings['PRODUCT_BUNDLE_IDENTIFIER'].nil? || config.build_settings['PRODUCT_BUNDLE_IDENTIFIER'].empty?
                config.build_settings['PRODUCT_BUNDLE_IDENTIFIER'] = 'org.reactjs.native.' + target.name.gsub(/[^a-zA-Z0-9]/, '')
                puts "Set bundle identifier for #{target.name}: #{config.build_settings['PRODUCT_BUNDLE_IDENTIFIER']}"
              end
            end
          end

          project.save
          EOF
          
          # Install xcodeproj gem and run the fix
          sudo gem install xcodeproj
          ruby fix_pods_bundle_ids.rb || echo "Ruby fix skipped, using alternative method"

      # Create Development Export Options
      - name: Create Development Export Options
        env:
          APP_TEAM_ID: ${{ secrets.APP_TEAM_ID }}
          APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
        run: |
          cat > ios/exportOptions_dev.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>method</key>
              <string>development</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>teamID</key>
              <string>$APP_TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$APP_BUNDLE_ID</key>
                  <string>$DEV_PROFILE_UUID</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Development</string>
              <key>uploadBitcode</key>
              <false/>
          </dict>
          </plist>
          EOF

      # Build Development Archive with proper settings
      - name: Build Development Archive
        env:
          APP_TEAM_ID: ${{ secrets.APP_TEAM_ID }}
          APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
        run: |
          cd ios
          
          echo "üèóÔ∏è  Cleaning for development build..."
          xcodebuild clean -workspace cicddemo.xcworkspace -scheme cicddemo -configuration Debug
          
          echo "üîç Verifying code signing setup..."
          security find-identity -v -p codesigning dev.keychain
          
          echo "üöÄ Building development archive (Debug configuration)..."
          
          # FIX: Use xcodebuild with proper settings for React Native
          xcodebuild archive \
            -workspace cicddemo.xcworkspace \
            -scheme cicddemo \
            -configuration Debug \
            -destination "generic/platform=iOS" \
            -archivePath build/Dev/cicddemo.xcarchive \
            DEVELOPMENT_TEAM="$APP_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$APP_BUNDLE_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$DEV_PROFILE_UUID" \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_IDENTITY="Apple Development" \
            CURRENT_PROJECT_VERSION=1 \
            MARKETING_VERSION=1.0.0 \
            CODE_SIGNING_REQUIRED=YES \
            CODE_SIGNING_ALLOWED=YES \
            HERMES_ENABLED=1 \
            OTHER_CODE_SIGN_FLAGS="--deep" \
            ENABLE_BITCODE=NO
          
          echo "‚úÖ Development archive created"

      # Export Development IPA
      - name: Export Development IPA
        run: |
          cd ios
          
          echo "üì¶ Exporting development IPA..."
          xcodebuild -exportArchive \
            -archivePath build/Dev/cicddemo.xcarchive \
            -exportOptionsPlist exportOptions_dev.plist \
            -exportPath build/Dev \
            -allowProvisioningUpdates
          
          echo "‚úÖ Development IPA exported"

      # Verify IPA
      - name: Verify Development IPA
        run: |
          cd ios
          
          echo "üîç Verifying development IPA..."
          if compgen -G "build/Dev/*.ipa" > /dev/null; then
            IPA_FILE=$(ls build/Dev/*.ipa)
            echo "‚úÖ Development IPA created successfully: $IPA_FILE"
            echo "üìä Size: $(wc -c < "$IPA_FILE") bytes"
            
            # Basic validation
            unzip -l "$IPA_FILE" | head -10
          else
            echo "‚ùå Development IPA not found"
            echo "Build directory contents:"
            ls -la build/Dev/
            exit 1
          fi

      # Upload Development IPA
      - name: Upload Development IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-development-app
          path: ios/build/Dev/*.ipa
          retention-days: 30

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          security delete-keychain dev.keychain || true
          rm -f dev_certificate.p12 dev_profile.mobileprovision dev_profile.plist || true
          rm -f ios/exportOptions_dev.plist || true

      # Success notification
      - name: Success Notification
        if: success()
        run: |
          echo "üéâ Development IPA Build Completed Successfully!"
          echo "üì± This IPA can be installed via InstallOnAir, Diawi, etc."
          echo "üì¶ Bundle ID: ${{ secrets.APP_BUNDLE_ID }}"
          echo "üë• Team ID: ${{ secrets.APP_TEAM_ID }}"
