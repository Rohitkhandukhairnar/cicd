name: React Native iOS Release Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ios-build:
    name: Build iOS IPA
    runs-on: macos-latest
    env:
      NODE_VERSION: '20'

    steps:
      # Clean derived data
      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/CocoaPods

      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Fix Bundle Identifier in Xcode Project
      - name: Fix Bundle Identifier in Xcode Project
        env:
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cd ios
          echo "üîß Fixing bundle identifier: $BUNDLE_ID"
          
          # Backup the project file
          cp cicddemo.xcodeproj/project.pbxproj cicddemo.xcodeproj/project.pbxproj.backup
          
          # Method 1: Replace existing bundle identifier
          if grep -q "PRODUCT_BUNDLE_IDENTIFIER" cicddemo.xcodeproj/project.pbxproj; then
            echo "üìù Replacing existing bundle identifier..."
            sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = \"$BUNDLE_ID\";/g" cicddemo.xcodeproj/project.pbxproj
          else
            echo "üìù Adding new bundle identifier..."
            # Find build settings section and add bundle identifier
            sed -i '' '/buildSettings = {/a\
            PRODUCT_BUNDLE_IDENTIFIER = \"'$BUNDLE_ID'\";' cicddemo.xcodeproj/project.pbxproj
          fi
          
          echo "‚úÖ Bundle identifier set to: $BUNDLE_ID"

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install npm dependencies
      - name: Install npm dependencies
        run: npm install

      # Install CocoaPods
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod --version

      # Install CocoaPods dependencies
      - name: Install Pods
        run: |
          cd ios
          pod install --repo-update

      # Verify Xcode project settings
      - name: Verify Xcode Project Settings
        run: |
          cd ios
          echo "üîç Verifying project configuration..."
          xcodebuild -list
          echo "üîç Checking bundle identifier..."
          xcodebuild -workspace cicddemo.xcworkspace -scheme cicddemo -showBuildSettings | grep PRODUCT_BUNDLE_IDENTIFIER || echo "‚ö†Ô∏è  Bundle identifier check failed"

      # Setup code signing
      - name: Setup Code Signing
        env:
          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APP_PROFILE_NAME: ${{ secrets.APP_PROFILE_NAME }}
        run: |
          set -euo pipefail

          echo "üîê Creating build keychain..."
          security create-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 build.keychain

          echo "üì¶ Importing certificate..."
          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign

          echo "üîß Setting key partition list..."
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$IOS_CERTIFICATE_PASSWORD" build.keychain

          echo "üì± Importing provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$IOS_PROVISION_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/build.mobileprovision

          echo "üìã Extracting provisioning profile info..."
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/build.mobileprovision > profile.plist
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" profile.plist)
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" profile.plist)
          
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
          
          echo "‚úÖ Code signing setup complete"
          echo "üì± Profile UUID: $PROFILE_UUID"
          echo "üìù Profile Name: $PROFILE_NAME"
          echo "üë• Team ID: $APPLE_TEAM_ID"
          echo "üîè Signing Identity: $APPLE_SIGNING_IDENTITY"

      # Create export options plist
      - name: Create exportOptions.plist
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cat > ios/exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>destination</key>
              <string>export</string>
              <key>method</key>
              <string>app-store</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROFILE_UUID</string>
              </dict>
              <key>signingCertificate</key>
              <string>$APPLE_SIGNING_IDENTITY</string>
          </dict>
          </plist>
          EOF
          
          echo "üìÑ exportOptions.plist created:"
          cat ios/exportOptions.plist

      # Build iOS app
      - name: Build iOS Archive
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        run: |
          cd ios
          
          echo "üèóÔ∏è  Cleaning build directory..."
          xcodebuild clean -workspace cicddemo.xcworkspace -scheme cicddemo -configuration Release
          
          echo "üîç Final build settings verification..."
          xcodebuild -workspace cicddemo.xcworkspace -scheme cicddemo -configuration Release -showBuildSettings | grep -E "(PRODUCT_BUNDLE_IDENTIFIER|PROVISIONING_PROFILE|DEVELOPMENT_TEAM)" || true
          
          echo "üöÄ Building archive (this may take 10-20 minutes)..."
          xcodebuild archive \
            -workspace cicddemo.xcworkspace \
            -scheme cicddemo \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath build/cicddemo.xcarchive \
            CODE_SIGN_STYLE="Manual" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGN_IDENTITY="$APPLE_SIGNING_IDENTITY" \
            CURRENT_PROJECT_VERSION=1 \
            MARKETING_VERSION=1.0 \
            CODE_SIGNING_REQUIRED=YES \
            CODE_SIGNING_ALLOWED=YES
          
          echo "‚úÖ Archive build completed"
          
          # Verify archive
          if [ -d "build/cicddemo.xcarchive" ]; then
            echo "üéâ Archive created successfully!"
            ls -la build/cicddemo.xcarchive/Products/Applications/
          else
            echo "‚ùå Archive creation failed!"
            exit 1
          fi

      # Export IPA
      - name: Export IPA
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        run: |
          cd ios
          
          echo "üì¶ Exporting IPA..."
          xcodebuild -exportArchive \
            -archivePath build/cicddemo.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build \
            -allowProvisioningUpdates \
            -verbose
          
          echo "‚úÖ Export process completed"
          
          # Check for IPA file
          echo "üîç Checking for IPA file..."
          ls -la build/
          
          if compgen -G "build/*.ipa" > /dev/null; then
            IPA_FILE=$(ls build/*.ipa)
            echo "üéâ IPA file found: $IPA_FILE"
            ls -la "$IPA_FILE"
            echo "IPA_FILE=$IPA_FILE" >> $GITHUB_ENV
            echo "IPA_SIZE=$(stat -f%z "$IPA_FILE")" >> $GITHUB_ENV
          else
            echo "‚ùå No IPA file found!"
            echo "Contents of build directory:"
            find build/ -type f -name "*" | head -20
            exit 1
          fi

      # Upload IPA artifact
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-release
          path: ios/build/*.ipa
          retention-days: 30

      # Upload Xcode archive for debugging
      - name: Upload Xcode Archive
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-archive
          path: ios/build/cicddemo.xcarchive
          retention-days: 7

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          security delete-keychain build.keychain || true
          rm -f certificate.p12 profile.plist || true
          rm -f ios/exportOptions.plist || true

      # Success notification
      - name: Success Notification
        if: success()
        run: |
          echo "üéâ iOS IPA Build Completed Successfully!"
          echo "üì± Bundle ID: ${{ secrets.APPLE_BUNDLE_ID }}"
          echo "üì¶ IPA File: ${{ env.IPA_FILE }}"
          echo "üíæ IPA Size: ${{ env.IPA_SIZE }} bytes"
          echo "üë• Team ID: ${{ secrets.APPLE_TEAM_ID }}"
          echo "‚úÖ Artifact 'ios-app-release' is ready for download"

      # Failure notification
      - name: Failure Notification
        if: failure()
        run: |
          echo "‚ùå iOS Build Failed!"
          echo "Please check the build logs and ensure:"
          echo "1. Bundle identifier is correct: ${{ secrets.APPLE_BUNDLE_ID }}"
          echo "2. Provisioning profile matches bundle ID"
          echo "3. Certificate and profile are not expired"
          echo "4. Team ID is correct: ${{ secrets.APPLE_TEAM_ID }}"
