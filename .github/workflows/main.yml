name: React Native iOS Release Build

on:
  push:
    branches:
      - main
      - release/*
  pull_request:
    branches:
      - main

jobs:
  ios-build:
    name: Build iOS IPA
    runs-on: macos-latest
    env:
      NODE_VERSION: '20'
      RUBY_VERSION: '3.2'

    steps:
      # Clean derived data to prevent caching issues
      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/CocoaPods

      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install xcpretty first
      - name: Install xcpretty
        run: gem install xcpretty

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # Install npm dependencies
      - name: Install npm dependencies
        run: npm ci --legacy-peer-deps

      # Set up Ruby
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      # Install CocoaPods
      - name: Install CocoaPods
        run: |
          gem install cocoapods
          pod --version

      # Install CocoaPods dependencies
      - name: Install Pods
        run: |
          cd ios
          pod install --repo-update --clean-install

      # Setup code signing
      - name: Setup Code Signing
        env:
          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          set -euo pipefail

          echo "üîê Creating build keychain..."
          security create-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          echo "üì¶ Importing certificate..."
          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign

          echo "üîß Setting key partition list..."
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$IOS_CERTIFICATE_PASSWORD" build.keychain

          echo "üì± Importing provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$IOS_PROVISION_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/build.mobileprovision

          echo "üìã Extracting provisioning profile info..."
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/build.mobileprovision > profile.plist
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" profile.plist)
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "PROVISIONING_PROFILE_SPECIFIER=$PROFILE_UUID" >> $GITHUB_ENV

          echo "‚úÖ Code signing setup complete"

      # Create export options plist
      - name: Create exportOptions.plist
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          cat > ios/exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>destination</key>
              <string>export</string>
              <key>method</key>
              <string>app-store</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>thinning</key>
              <string>&lt;none&gt;</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROFILE_UUID</string>
              </dict>
          </dict>
          </plist>
          EOF

          echo "üìÑ exportOptions.plist content:"
          cat ios/exportOptions.plist

      # Build iOS app
      - name: Build iOS Archive
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          cd ios

          echo "üèóÔ∏è  Cleaning build directory..."
          xcodebuild clean -workspace cicddemo.xcworkspace \
            -scheme cicddemo \
            -configuration Release

          echo "üöÄ Building archive..."
          xcodebuild archive \
            -workspace cicddemo.xcworkspace \
            -scheme cicddemo \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath build/cicddemo.xcarchive \
            CODE_SIGN_STYLE="Manual" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            PROVISIONING_PROFILE="$PROFILE_UUID" \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            | xcpretty

          echo "‚úÖ Archive created successfully"

      # Export IPA from archive
      - name: Export IPA
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        run: |
          cd ios

          echo "üì¶ Exporting IPA..."
          xcodebuild -exportArchive \
            -archivePath build/cicddemo.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build \
            -allowProvisioningUpdates \
            | xcpretty

          echo "‚úÖ IPA exported successfully"

          # List generated files
          echo "üìÅ Generated files:"
          ls -la build/

      # Upload IPA artifact
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-release
          path: ios/build/*.ipa
          retention-days: 7

      # Cleanup keychain
      - name: Cleanup Keychain
        if: always()
        run: |
          security delete-keychain build.keychain || true
          rm -f certificate.p12
          rm -f profile.plist

      # Notify success
      - name: Notify Success
        if: success()
        run: |
          echo "üéâ iOS build completed successfully!"
          echo "IPA artifact has been uploaded"

      # Notify failure
      - name: Notify Failure
        if: failure()
        run: |
          echo "‚ùå iOS build failed!"
          exit 1
