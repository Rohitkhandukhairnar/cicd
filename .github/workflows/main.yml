name: React Native iOS Development Build

on:
  push:
    branches:
      - main
      - develop
  pull_request:

jobs:
  ios-development-build:
    name: Build Development IPA
    runs-on: macos-latest
    env:
      NODE_VERSION: '20'

    steps:
      # Clean derived data
      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/CocoaPods

      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install npm dependencies
      - name: Install npm dependencies
        run: npm install

      # Install CocoaPods
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod --version

      # Install CocoaPods dependencies
      - name: Install Pods
        run: |
          cd ios
          pod install --repo-update

      # Fix Bundle Identifier in Xcode Project
      - name: Fix Bundle Identifier for Development
        env:
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID_DEV }}
        run: |
          cd ios
          echo "üîß Setting bundle identifier: $BUNDLE_ID"
          
          # Update project file
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = \"$BUNDLE_ID\";/g" cicddemo.xcodeproj/project.pbxproj
          
          # Update Info.plist if exists
          if [ -f "cicddemo/Info.plist" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $BUNDLE_ID" cicddemo/Info.plist
          fi
          
          echo "‚úÖ Bundle identifier set to: $BUNDLE_ID"

      # Setup Development Code Signing with better certificate handling
      - name: Setup Development Code Signing
        env:
          IOS_DEVELOPMENT_PROFILE_BASE64: ${{ secrets.IOS_DEVELOPMENT_PROFILE_BASE64 }}
          IOS_DEVELOPMENT_CERTIFICATE_BASE64: ${{ secrets.IOS_DEVELOPMENT_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD_DEV: ${{ secrets.IOS_CERTIFICATE_PASSWORD_DEV }}
        run: |
          set -euo pipefail

          echo "üîê Creating build keychain..."
          security create-keychain -p "$IOS_CERTIFICATE_PASSWORD_DEV" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$IOS_CERTIFICATE_PASSWORD_DEV" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          echo "üì¶ Importing development certificate..."
          echo "$IOS_DEVELOPMENT_CERTIFICATE_BASE64" | base64 --decode > development_certificate.p12
          security import development_certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD_DEV" -T /usr/bin/codesign -A

          echo "üîß Setting key partition list..."
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$IOS_CERTIFICATE_PASSWORD_DEV" build.keychain

          echo "üì± Importing development provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$IOS_DEVELOPMENT_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/build.mobileprovision

          echo "üìã Extracting provisioning profile info..."
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/build.mobileprovision > profile.plist
          
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" profile.plist)
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" profile.plist)
          
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
          
          echo "‚úÖ Development code signing setup complete"
          echo "üìù Profile Name: $PROFILE_NAME"
          echo "üîë Profile UUID: $PROFILE_UUID"

          # List all certificates to verify
          echo "üîç Listing all certificates in keychain:"
          security find-identity -p codesigning -v build.keychain

          # Also check system keychain for reference
          echo "üîç Checking system keychain for reference:"
          security find-identity -p codesigning -v

      # Create development export options plist
      - name: Create Development exportOptions.plist
        env:
          APPLE_TEAM_ID_DEV: ${{ secrets.APPLE_TEAM_ID_DEV }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID_DEV }}
        run: |
          cat > ios/exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>development</string>
            <key>teamID</key>
            <string>$APPLE_TEAM_ID_DEV</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>$BUNDLE_ID</key>
              <string>$PROFILE_UUID</string>
            </dict>
            <key>compileBitcode</key>
            <false/>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <false/>
            <key>iCloudContainerEnvironment</key>
            <string>Development</string>
            <key>stripSwiftSymbols</key>
            <true/>
          </dict>
          </plist>
          EOF
          
          echo "‚úÖ Development exportOptions.plist created"

      # Build iOS app for development with explicit signing
      - name: Build iOS Development App
        env:
          APPLE_TEAM_ID_DEV: ${{ secrets.APPLE_TEAM_ID_DEV }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID_DEV }}
          APPLE_SIGNING_IDENTITY_DEV: ${{ secrets.APPLE_SIGNING_IDENTITY_DEV }}
        run: |
          cd ios
          
          echo "üèóÔ∏è  Cleaning build directory..."
          xcodebuild clean -workspace cicddemo.xcworkspace -scheme cicddemo -configuration Debug
          
          echo "üîç Verifying code signing setup..."
          echo "Signing Identity: $APPLE_SIGNING_IDENTITY_DEV"
          security find-identity -p codesigning -v build.keychain
          
          echo "üöÄ Building development archive..."
          # Try multiple approaches to find the right certificate
          xcodebuild archive \
            -workspace cicddemo.xcworkspace \
            -scheme cicddemo \
            -configuration Debug \
            -destination "generic/platform=iOS" \
            -archivePath build/cicddemo.xcarchive \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID_DEV" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            PROVISIONING_PROFILE="$PROFILE_UUID" \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_IDENTITY="$APPLE_SIGNING_IDENTITY_DEV" \
            CODE_SIGNING_ALLOWED="YES" \
            CODE_SIGNING_REQUIRED="YES" \
            CURRENT_PROJECT_VERSION=1 \
            MARKETING_VERSION=1.0 \
            ENABLE_BITCODE="NO" \
            OTHER_CODE_SIGN_FLAGS="--keychain build.keychain" \
            -allowProvisioningUpdates
          
          if [ -d "build/cicddemo.xcarchive" ]; then
            echo "‚úÖ Development archive created successfully!"
          else
            echo "‚ùå Archive creation failed!"
            echo "Trying alternative approach..."
            
            # Alternative approach - let Xcode automatically select certificate
            xcodebuild archive \
              -workspace cicddemo.xcworkspace \
              -scheme cicddemo \
              -configuration Debug \
              -destination "generic/platform=iOS" \
              -archivePath build/cicddemo.xcarchive \
              DEVELOPMENT_TEAM="$APPLE_TEAM_ID_DEV" \
              PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
              PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
              CODE_SIGN_STYLE="Manual" \
              CURRENT_PROJECT_VERSION=1 \
              MARKETING_VERSION=1.0 \
              ENABLE_BITCODE="NO" \
              -allowProvisioningUpdates
              
            if [ -d "build/cicddemo.xcarchive" ]; then
              echo "‚úÖ Development archive created with automatic signing!"
            else
              echo "‚ùå Archive creation failed completely!"
              exit 1
            fi
          fi

      # Export Development IPA
      - name: Export Development IPA
        run: |
          cd ios
          
          echo "üì¶ Exporting Development IPA..."
          xcodebuild -exportArchive \
            -archivePath build/cicddemo.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build \
            -allowProvisioningUpdates
          
          echo "‚úÖ Development export completed"
          
          if compgen -G "build/*.ipa" > /dev/null; then
            IPA_FILE=$(ls build/*.ipa)
            echo "üéâ Development IPA created: $IPA_FILE"
            echo "üì± Bundle ID: $BUNDLE_ID"
            ls -la "$IPA_FILE"
          else
            echo "‚ùå IPA not found!"
            echo "Build directory contents:"
            ls -la build/
            exit 1
          fi

      # Upload IPA artifact
      - name: Upload Development IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-development
          path: ios/build/*.ipa
          retention-days: 30

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          security delete-keychain build.keychain || true
          rm -f development_certificate.p12 profile.plist || true

      # Success notification
      - name: Success Notification
        if: success()
        run: |
          echo "üéâ iOS Development IPA Build Completed Successfully!"
          echo "üì± Bundle ID: ${{ secrets.APPLE_BUNDLE_ID_DEV }}"
          echo "üë• Team ID: ${{ secrets.APPLE_TEAM_ID_DEV }}"
          echo "üîê Signing Identity: ${{ secrets.APPLE_SIGNING_IDENTITY_DEV }}"
          echo "‚úÖ IPA can be installed on registered test devices"
