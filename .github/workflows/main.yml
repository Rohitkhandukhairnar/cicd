name: React Native iOS Release Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ios-build:
    name: Build iOS IPA
    runs-on: macos-latest
    env:
      NODE_VERSION: '20'

    steps:
      # Clean derived data
      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/CocoaPods

      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install npm dependencies
      - name: Install npm dependencies
        run: npm install

      # Install CocoaPods
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod --version

      # Install CocoaPods dependencies
      - name: Install Pods
        run: |
          cd ios
          pod install --repo-update

      # Decode and verify provisioning profile FIRST
      - name: Decode Provisioning Profile
        env:
          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          echo "üìã Decoding and verifying provisioning profile..."
          
          # Decode the profile
          echo "$IOS_PROVISION_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          
          # Check file size and type
          echo "üìä Profile file size: $(wc -c < profile.mobileprovision) bytes"
          echo "üìÑ File type: $(file profile.mobileprovision)"
          
          # Verify it's a valid provisioning profile
          if security cms -D -i profile.mobileprovision > profile.plist 2>/dev/null; then
            echo "‚úÖ Provisioning profile decoded successfully"
          else
            echo "‚ùå Failed to decode provisioning profile - may be corrupted"
            echo "üîç First 100 characters of base64:"
            echo "$IOS_PROVISION_PROFILE_BASE64" | cut -c1-100
            exit 1
          fi
          
          # Extract profile info
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" profile.plist)
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" profile.plist)
          PROFILE_BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" profile.plist 2>/dev/null || echo "Not found")
          PROFILE_TEAM_ID=$(/usr/libexec/PlistBuddy -c "Print :TeamIdentifier:0" profile.plist)
          EXPIRATION_DATE=$(/usr/libexec/PlistBuddy -c "Print :ExpirationDate" profile.plist)
          
          echo "üîç Profile Name: $PROFILE_NAME"
          echo "üîç Profile UUID: $PROFILE_UUID"
          echo "üîç Bundle ID in Profile: $PROFILE_BUNDLE_ID"
          echo "üîç Team ID: $PROFILE_TEAM_ID"
          echo "üîç Expiration Date: $EXPIRATION_DATE"
          
          # Verify bundle ID matches
          if [[ "$PROFILE_BUNDLE_ID" == *"$BUNDLE_ID"* ]]; then
            echo "‚úÖ Bundle ID matches provisioning profile"
          else
            echo "‚ö†Ô∏è  Bundle ID may not match: Profile expects '$PROFILE_BUNDLE_ID', using '$BUNDLE_ID'"
          fi
          
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "PROFILE_TEAM_ID=$PROFILE_TEAM_ID" >> $GITHUB_ENV

      # Setup code signing (SIMPLIFIED)
      - name: Setup Code Signing
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: |
          set -euo pipefail

          echo "üîê Setting up code signing..."
          
          # Create keychain
          security create-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 build.keychain

          # Import certificate
          echo "üì¶ Importing certificate..."
          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign

          # Configure keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$IOS_CERTIFICATE_PASSWORD" build.keychain
          
          echo "‚úÖ Code signing setup complete"

      # Install provisioning profile (SIMPLIFIED - skip codesign verification)
      - name: Install Provisioning Profile
        run: |
          echo "üì± Installing provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID.mobileprovision"
          
          # Just verify the file was copied
          if [ -f ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID.mobileprovision" ]; then
            echo "‚úÖ Provisioning profile installed: $PROFILE_UUID"
            echo "üìä Installed profile size: $(wc -c < ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID.mobileprovision") bytes"
          else
            echo "‚ùå Failed to install provisioning profile"
            exit 1
          fi

      # Create export options plist
      - name: Create exportOptions.plist
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cat > ios/exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>method</key>
              <string>app-store</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROFILE_UUID</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
          </dict>
          </plist>
          EOF

      # Build iOS app (SIMPLIFIED - remove problematic verification)
      - name: Build iOS Archive
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cd ios
          
          echo "üèóÔ∏è  Cleaning build directory..."
          xcodebuild clean -workspace cicddemo.xcworkspace -scheme cicddemo -configuration Release
          
          echo "üîç Checking code signing identities..."
          security find-identity -v -p codesigning build.keychain
          
          echo "üöÄ Building archive..."
          xcodebuild archive \
            -workspace cicddemo.xcworkspace \
            -scheme cicddemo \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath build/cicddemo.xcarchive \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            CURRENT_PROJECT_VERSION=1 \
            MARKETING_VERSION=1.0
          
          echo "‚úÖ Archive created"

      # Export IPA
      - name: Export IPA
        run: |
          cd ios
          
          echo "üì¶ Exporting IPA..."
          xcodebuild -exportArchive \
            -archivePath build/cicddemo.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build \
            -allowProvisioningUpdates
          
          echo "‚úÖ IPA exported"

      # Verify the IPA file (basic check)
      - name: Verify IPA
        run: |
          cd ios
          
          echo "üîç Verifying IPA file..."
          if compgen -G "build/*.ipa" > /dev/null; then
            IPA_FILE=$(ls build/*.ipa)
            echo "‚úÖ IPA file found: $IPA_FILE"
            echo "üìä IPA size: $(wc -c < "$IPA_FILE") bytes"
            
            # Basic structure check
            unzip -l "$IPA_FILE" | grep "Payload/" > /dev/null && echo "‚úÖ IPA structure is valid"
          else
            echo "‚ùå No IPA file found"
            exit 1
          fi

      # Upload IPA artifact
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-release
          path: ios/build/*.ipa
          retention-days: 30

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          security delete-keychain build.keychain || true
          rm -f certificate.p12 profile.plist profile.mobileprovision || true
          rm -f ios/exportOptions.plist || true

      # Success notification
      - name: Success Notification
        if: success()
        run: |
          echo "üéâ iOS IPA Build Completed Successfully!"
          echo "üì± Bundle ID: ${{ secrets.APPLE_BUNDLE_ID }}"
          echo "üë• Team ID: ${{ secrets.APPLE_TEAM_ID }}"
          echo "‚úÖ IPA is available in the artifacts"

      # Failure notification
      - name: Failure Notification
        if: failure()
        run: |
          echo "‚ùå Build failed!"
          echo "Common issues:"
          echo "1. Provisioning profile may be corrupted"
          echo "2. Certificate may be expired"
          echo "3. Bundle ID mismatch"
          echo "4. Team ID incorrect"
