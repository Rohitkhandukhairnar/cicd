name: React Native iOS Build (Development + Distribution)

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ios-build:
    name: Build iOS IPAs (Dev + Dist)
    runs-on: macos-latest
    env:
      NODE_VERSION: '20'

    steps:
      # Clean derived data
      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/CocoaPods

      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install npm dependencies
      - name: Install npm dependencies
        run: npm install

      # Install CocoaPods
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod --version

      # Install CocoaPods dependencies
      - name: Install Pods
        run: |
          cd ios
          pod install --repo-update

      # ===============================
      # DEVELOPMENT IPA BUILD
      # ===============================
      - name: Build Development IPA
        if: always()
        env:
          BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APP_TEAM_ID }}  # Fixed to match your secret
          IOS_DEVELOPMENT_PROFILE_BASE64: ${{ secrets.IOS_DEVELOPMENT_PROFILE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: |
          echo "üöÄ STARTING DEVELOPMENT IPA BUILD..."
          
          # Check if development profile exists
          if [ -z "$IOS_DEVELOPMENT_PROFILE_BASE64" ]; then
            echo "‚ö†Ô∏è  Development profile not found, skipping development build"
            echo "üí° To enable development builds, add this secret:"
            echo "   - IOS_DEVELOPMENT_PROFILE_BASE64"
            echo "üí° And create a DEVELOPMENT certificate (not distribution)"
            exit 0
          fi

          # Decode Development Provisioning Profile
          echo "üìã Decoding development provisioning profile..."
          echo "$IOS_DEVELOPMENT_PROFILE_BASE64" | base64 --decode > dev_profile.mobileprovision
          security cms -D -i dev_profile.mobileprovision > dev_profile.plist
          DEV_PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" dev_profile.plist)
          echo "DEV_PROFILE_UUID=$DEV_PROFILE_UUID" >> $GITHUB_ENV
          echo "‚úÖ Development Profile UUID: $DEV_PROFILE_UUID"

          # Check if we have a development certificate
          echo "üîç Checking for development certificate..."
          if [ -n "$IOS_DEVELOPMENT_CERTIFICATE_BASE64" ]; then
            echo "‚úÖ Using development certificate"
            CERTIFICATE_BASE64="$IOS_DEVELOPMENT_CERTIFICATE_BASE64"
            CODE_SIGN_IDENTITY="Apple Development"
          else
            echo "‚ö†Ô∏è  No development certificate, cannot build development IPA"
            echo "üí° Add IOS_DEVELOPMENT_CERTIFICATE_BASE64 secret for development builds"
            exit 0
          fi

          # Setup Development Code Signing
          echo "üîê Setting up development code signing..."
          security create-keychain -p "$IOS_CERTIFICATE_PASSWORD" dev.keychain
          security default-keychain -s dev.keychain
          security unlock-keychain -p "$IOS_CERTIFICATE_PASSWORD" dev.keychain
          security set-keychain-settings -t 3600 dev.keychain

          echo "$CERTIFICATE_BASE64" | base64 --decode > dev_certificate.p12
          security import dev_certificate.p12 -k dev.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$IOS_CERTIFICATE_PASSWORD" dev.keychain

          # Install Development Profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp dev_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$DEV_PROFILE_UUID.mobileprovision"

          # Create Development Export Options
          cat > ios/exportOptions_dev.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>method</key>
              <string>development</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$DEV_PROFILE_UUID</string>
              </dict>
              <key>signingCertificate</key>
              <string>$CODE_SIGN_IDENTITY</string>
          </dict>
          </plist>
          EOF

          # Build Development Archive
          cd ios
          echo "üèóÔ∏è  Cleaning for development build..."
          xcodebuild clean -workspace cicddemo.xcworkspace -scheme cicddemo -configuration Debug

          echo "üöÄ Building development archive..."
          xcodebuild archive \
            -workspace cicddemo.xcworkspace \
            -scheme cicddemo \
            -configuration Debug \
            -destination "generic/platform=iOS" \
            -archivePath build/dev/cicddemo.xcarchive \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$DEV_PROFILE_UUID" \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
            CURRENT_PROJECT_VERSION=1 \
            MARKETING_VERSION=1.0

          # Export Development IPA
          echo "üì¶ Exporting development IPA..."
          xcodebuild -exportArchive \
            -archivePath build/dev/cicddemo.xcarchive \
            -exportOptionsPlist exportOptions_dev.plist \
            -exportPath build/dev \
            -allowProvisioningUpdates

          # Verify Development IPA
          if compgen -G "build/dev/*.ipa" > /dev/null; then
            DEV_IPA_FILE=$(ls build/dev/*.ipa)
            echo "‚úÖ Development IPA created: $DEV_IPA_FILE"
            echo "üìä Size: $(wc -c < "$DEV_IPA_FILE") bytes"
          else
            echo "‚ùå Development IPA creation failed"
            exit 1
          fi

          cd ..
          echo "üéâ DEVELOPMENT BUILD COMPLETED"

      # Upload Development IPA
      - name: Upload Development IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-development-app
          path: ios/build/dev/*.ipa
          retention-days: 30
        if: always()

      # ===============================
      # DISTRIBUTION IPA BUILD
      # ===============================
      - name: Build Distribution IPA
        env:
          BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APP_TEAM_ID }}  # Fixed to match your secret
          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_SIGNING_IDENTITY: ${{ secrets.IOS_SIGNING_IDENTITY }}
        run: |
          echo "üöÄ STARTING DISTRIBUTION IPA BUILD..."
          
          # Decode Distribution Provisioning Profile
          echo "üìã Decoding distribution provisioning profile..."
          echo "$IOS_PROVISION_PROFILE_BASE64" | base64 --decode > dist_profile.mobileprovision
          security cms -D -i dist_profile.mobileprovision > dist_profile.plist
          DIST_PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" dist_profile.plist)
          echo "DIST_PROFILE_UUID=$DIST_PROFILE_UUID" >> $GITHUB_ENV
          echo "‚úÖ Distribution Profile UUID: $DIST_PROFILE_UUID"

          # Setup Distribution Code Signing
          echo "üîê Setting up distribution code signing..."
          security create-keychain -p "$IOS_CERTIFICATE_PASSWORD" dist.keychain
          security default-keychain -s dist.keychain
          security unlock-keychain -p "$IOS_CERTIFICATE_PASSWORD" dist.keychain
          security set-keychain-settings -t 3600 dist.keychain

          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > dist_certificate.p12
          security import dist_certificate.p12 -k dist.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$IOS_CERTIFICATE_PASSWORD" dist.keychain

          # Install Distribution Profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp dist_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$DIST_PROFILE_UUID.mobileprovision"

          # Create Distribution Export Options
          cat > ios/exportOptions_dist.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>method</key>
              <string>app-store</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$DIST_PROFILE_UUID</string>
              </dict>
              <key>signingCertificate</key>
              <string>$IOS_SIGNING_IDENTITY</string>
          </dict>
          </plist>
          EOF

          # Build Distribution Archive
          cd ios
          echo "üèóÔ∏è  Cleaning for distribution build..."
          xcodebuild clean -workspace cicddemo.xcworkspace -scheme cicddemo -configuration Release

          echo "üöÄ Building distribution archive..."
          xcodebuild archive \
            -workspace cicddemo.xcworkspace \
            -scheme cicddemo \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath build/dist/cicddemo.xcarchive \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$DIST_PROFILE_UUID" \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_IDENTITY="$IOS_SIGNING_IDENTITY" \
            CURRENT_PROJECT_VERSION=1 \
            MARKETING_VERSION=1.0

          # Export Distribution IPA
          echo "üì¶ Exporting distribution IPA..."
          xcodebuild -exportArchive \
            -archivePath build/dist/cicddemo.xcarchive \
            -exportOptionsPlist exportOptions_dist.plist \
            -exportPath build/dist \
            -allowProvisioningUpdates

          # Verify Distribution IPA
          if compgen -G "build/dist/*.ipa" > /dev/null; then
            DIST_IPA_FILE=$(ls build/dist/*.ipa)
            echo "‚úÖ Distribution IPA created: $DIST_IPA_FILE"
            echo "üìä Size: $(wc -c < "$DIST_IPA_FILE") bytes"
          else
            echo "‚ùå Distribution IPA creation failed"
            exit 1
          fi

          echo "üéâ DISTRIBUTION BUILD COMPLETED"

      # Upload Distribution IPA
      - name: Upload Distribution IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-distribution-app
          path: ios/build/dist/*.ipa
          retention-days: 30
        if: always()

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          security delete-keychain dev.keychain || true
          security delete-keychain dist.keychain || true
          rm -f dev_certificate.p12 dev_profile.mobileprovision dev_profile.plist || true
          rm -f dist_certificate.p12 dist_profile.mobileprovision dist_profile.plist || true
          rm -f ios/exportOptions_dev.plist ios/exportOptions_dist.plist || true

      # Success notification
      - name: Success Notification
        if: success()
        run: |
          echo "üéâ iOS Builds Completed Successfully!"
          echo ""
          echo "üì¶ Distribution IPA: READY (uses your existing certificates)"
          echo "üì± Development IPA: PENDING (needs development certificates)"
          echo ""
          echo "üîß To enable Development IPA, add these secrets:"
          echo "   - IOS_DEVELOPMENT_PROFILE_BASE64"
          echo "   - IOS_DEVELOPMENT_CERTIFICATE_BASE64"
