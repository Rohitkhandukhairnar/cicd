name: React Native iOS Development Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ios-build:
    name: Build iOS Development IPA
    runs-on: macos-latest
    env:
      NODE_VERSION: '20'

    steps:
      # Clean derived data
      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/CocoaPods

      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install npm dependencies
      - name: Install npm dependencies
        run: npm install

      # Install CocoaPods
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod --version

      # Install CocoaPods dependencies
      - name: Install Pods
        run: |
          cd ios
          pod install --repo-update

      # Fix Bundle Identifier in Xcode Project
      - name: Fix Bundle Identifier in Xcode Project
        env:
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cd ios
          echo "üîß Setting bundle identifier: $BUNDLE_ID"
          
          # Use PlistBuddy to properly set the bundle identifier
          /usr/libexec/PlistBuddy -c "Set :objects:$(grep -A5 'buildSettings' cicddemo.xcodeproj/project.pbxproj | grep -m1 'isa = PBXNativeTarget' -B10 | grep -o '[A-F0-9]*' | head -1):buildSettings:PRODUCT_BUNDLE_IDENTIFIER $BUNDLE_ID" cicddemo.xcodeproj/project.pbxproj 2>/dev/null || \
          echo "Using alternative method to set bundle identifier..."
          
          # Alternative method using sed
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = \"$BUNDLE_ID\";/g" cicddemo.xcodeproj/project.pbxproj || \
          sed -i '' "/buildSettings = {/,/};/s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = \"$BUNDLE_ID\";/g" cicddemo.xcodeproj/project.pbxproj
          
          echo "‚úÖ Bundle identifier set"

      # Setup code signing for development
      - name: Setup Code Signing
        env:
          IOS_DEVELOPMENT_PROFILE_BASE64: ${{ secrets.IOS_DEVELOPMENT_PROFILE_BASE64 }}
          IOS_DEVELOPMENT_CERTIFICATE_BASE64: ${{ secrets.IOS_DEVELOPMENT_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail

          echo "üîê Creating build keychain..."
          security create-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 build.keychain

          echo "üì¶ Importing development certificate..."
          echo "$IOS_DEVELOPMENT_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign

          echo "üîß Setting key partition list..."
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$IOS_CERTIFICATE_PASSWORD" build.keychain

          echo "üì± Importing development provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$IOS_DEVELOPMENT_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/build.mobileprovision

          echo "üìã Extracting provisioning profile info..."
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/build.mobileprovision > profile.plist
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" profile.plist)
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          
          echo "‚úÖ Code signing setup complete"

      # Create export options plist for development
      - name: Create exportOptions.plist
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cat > ios/exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>method</key>
              <string>development</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROFILE_UUID</string>
              </dict>
          </dict>
          </plist>
          EOF

      # Build iOS app for development
      - name: Build iOS App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cd ios
          
          echo "üèóÔ∏è  Cleaning build directory..."
          xcodebuild clean -workspace cicddemo.xcworkspace -scheme cicddemo -configuration Debug
          
          echo "üîç Verifying project setup..."
          xcodebuild -workspace cicddemo.xcworkspace -scheme cicddemo -configuration Debug -showBuildSettings > build_settings.log
          grep -E "(PRODUCT_BUNDLE_IDENTIFIER|PROVISIONING_PROFILE|DEVELOPMENT_TEAM)" build_settings.log || true
          
          echo "üöÄ Building archive (Swift preview warnings are normal)..."
          xcodebuild archive \
            -workspace cicddemo.xcworkspace \
            -scheme cicddemo \
            -configuration Debug \
            -destination "generic/platform=iOS" \
            -archivePath build/cicddemo.xcarchive \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            CODE_SIGN_STYLE="Manual" \
            CURRENT_PROJECT_VERSION=1 \
            MARKETING_VERSION=1.0
          
          if [ -d "build/cicddemo.xcarchive" ]; then
            echo "‚úÖ Archive created successfully!"
          else
            echo "‚ùå Archive creation failed!"
            echo "Build settings:"
            cat build_settings.log
            exit 1
          fi

      # Export IPA for development
      - name: Export IPA
        run: |
          cd ios
          
          echo "üì¶ Exporting IPA..."
          xcodebuild -exportArchive \
            -archivePath build/cicddemo.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build \
            -allowProvisioningUpdates
          
          echo "‚úÖ Export completed"
          
          if compgen -G "build/*.ipa" > /dev/null; then
            IPA_FILE=$(ls build/*.ipa)
            echo "üéâ IPA created: $IPA_FILE"
            ls -la "$IPA_FILE"
          else
            echo "‚ùå IPA not found!"
            echo "Build directory contents:"
            ls -la build/
            exit 1
          fi

      # Upload IPA artifact
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-development
          path: ios/build/*.ipa
          retention-days: 30

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          security delete-keychain build.keychain || true
          rm -f certificate.p12 profile.plist || true

      # Success notification
      - name: Success Notification
        if: success()
        run: |
          echo "üéâ iOS Development IPA Build Completed Successfully!"
          echo "üì± Bundle ID: ${{ secrets.APPLE_BUNDLE_ID }}"
          echo "üë• Team ID: ${{ secrets.APPLE_TEAM_ID }}"
          echo "‚úÖ IPA is available in the artifacts"
