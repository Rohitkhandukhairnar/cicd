name: React Native iOS Release Build with Development Profile

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ios-build:
    name: Build iOS IPA (Development Profile - Release IPA)
    runs-on: macos-latest
    env:
      NODE_VERSION: '20'

    steps:
      # Clean derived data
      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/CocoaPods

      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install npm dependencies
      - name: Install npm dependencies
        run: npm install

      # Install CocoaPods
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod --version

      # Install CocoaPods dependencies
      - name: Install Pods
        run: |
          cd ios
          pod install --repo-update

      # Decode and verify DEVELOPMENT provisioning profile (using IOS_DEVELOPMENT_PROFILE_BASE64)
      - name: Decode Development Provisioning Profile
        env:
          IOS_DEVELOPMENT_PROFILE_BASE64: ${{ secrets.IOS_DEVELOPMENT_PROFILE_BASE64 }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          echo "üìã Decoding and verifying DEVELOPMENT provisioning profile..."
          
          # Decode the profile
          echo "$IOS_DEVELOPMENT_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          
          # Verify it's a valid provisioning profile
          if security cms -D -i profile.mobileprovision > profile.plist 2>/dev/null; then
            echo "‚úÖ Development provisioning profile decoded successfully"
          else
            echo "‚ùå Failed to decode development provisioning profile"
            exit 1
          fi
          
          # Extract profile info
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" profile.plist)
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" profile.plist)
          PROFILE_BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" profile.plist 2>/dev/null || echo "Not found")
          PROFILE_TEAM_ID=$(/usr/libexec/PlistBuddy -c "Print :TeamIdentifier:0" profile.plist)
          EXPIRATION_DATE=$(/usr/libexec/PlistBuddy -c "Print :ExpirationDate" profile.plist)
          PROFILE_TYPE=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:get-task-allow" profile.plist 2>/dev/null || echo "false")
          
          echo "üîç Profile Name: $PROFILE_NAME"
          echo "üîç Profile UUID: $PROFILE_UUID"
          echo "üîç Bundle ID: $PROFILE_BUNDLE_ID"
          echo "üîç Team ID: $PROFILE_TEAM_ID"
          echo "üîç Expiration Date: $EXPIRATION_DATE"
          echo "üîç Development Profile (get-task-allow): $PROFILE_TYPE"
          
          # Verify it's a development profile
          if [[ "$PROFILE_TYPE" == "true" ]]; then
            echo "‚úÖ This is a DEVELOPMENT provisioning profile (will be used for Release build)"
          else
            echo "‚ö†Ô∏è  This doesn't appear to be a development profile"
          fi
          
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "PROFILE_TEAM_ID=$PROFILE_TEAM_ID" >> $GITHUB_ENV

      # Setup code signing with DEVELOPMENT certificate (using IOS_DEVELOPMENT_CERTIFICATE_BASE64)
      - name: Setup Development Code Signing
        env:
          IOS_DEVELOPMENT_CERTIFICATE_BASE64: ${{ secrets.IOS_DEVELOPMENT_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: |
          set -euo pipefail
          echo "üîê Setting up DEVELOPMENT code signing for RELEASE build..."
          
          # Create keychain
          security create-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 build.keychain
          
          # Import DEVELOPMENT certificate
          echo "üì¶ Importing DEVELOPMENT certificate..."
          echo "$IOS_DEVELOPMENT_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          
          # Configure keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$IOS_CERTIFICATE_PASSWORD" build.keychain
          
          echo "‚úÖ Development code signing setup complete"

      # Install DEVELOPMENT provisioning profile
      - name: Install Provisioning Profile
        run: |
          echo "üì± Installing DEVELOPMENT provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID.mobileprovision"
          echo "‚úÖ Development provisioning profile installed: $PROFILE_UUID"

      # Create export options plist for DEVELOPMENT profile but RELEASE build
      - name: Create exportOptions.plist
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cat > ios/exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>method</key>
              <string>development</string>  <!-- DEVELOPMENT method for direct installation -->
              <key>signingStyle</key>
              <string>manual</string>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROFILE_UUID</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Development</string>  <!-- DEVELOPMENT certificate -->
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <false/>
          </dict>
          </plist>
          EOF
          echo "‚úÖ Created exportOptions.plist for DEVELOPMENT profile + RELEASE build"

      # Build iOS app with RELEASE configuration but DEVELOPMENT signing
      - name: Build iOS Archive
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cd ios
          
          echo "üèóÔ∏è  Cleaning build directory..."
          xcodebuild clean -workspace cicddemo.xcworkspace -scheme cicddemo -configuration Release  <!-- RELEASE build -->
          
          echo "üîç Checking code signing identities..."
          security find-identity -v -p codesigning build.keychain
          
          echo "üöÄ Building RELEASE archive with DEVELOPMENT profile..."
          xcodebuild archive \
            -workspace cicddemo.xcworkspace \
            -scheme cicddemo \
            -configuration Release \  <!-- RELEASE configuration -->
            -destination "generic/platform=iOS" \
            -archivePath build/cicddemo.xcarchive \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_IDENTITY="Apple Development" \  <!-- DEVELOPMENT identity -->
            CURRENT_PROJECT_VERSION=1 \
            MARKETING_VERSION=1.0
          
          echo "‚úÖ Release archive with Development profile created"

      # Export IPA
      - name: Export IPA
        run: |
          cd ios
          
          echo "üì¶ Exporting IPA (Development profile + Release build)..."
          xcodebuild -exportArchive \
            -archivePath build/cicddemo.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build \
            -allowProvisioningUpdates
          
          echo "‚úÖ IPA exported"

      # Verify the IPA file
      - name: Verify IPA
        run: |
          cd ios
          
          echo "üîç Verifying IPA file..."
          if compgen -G "build/*.ipa" > /dev/null; then
            IPA_FILE=$(ls build/*.ipa)
            echo "‚úÖ IPA file found: $IPA_FILE"
            echo "üìä IPA size: $(wc -c < "$IPA_FILE") bytes"
            
            # Check if it's a development IPA
            unzip -p "$IPA_FILE" Payload/*.app/embedded.mobileprovision > embedded.mobileprovision
            if security cms -D -i embedded.mobileprovision > embedded.plist 2>/dev/null; then
              GET_TASK_ALLOW=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:get-task-allow" embedded.plist 2>/dev/null || echo "false")
              if [[ "$GET_TASK_ALLOW" == "true" ]]; then
                echo "‚úÖ This IPA can be installed directly on devices (Development profile)"
              else
                echo "‚ö†Ô∏è  This IPA may require App Store distribution"
              fi
            fi
          else
            echo "‚ùå No IPA file found"
            exit 1
          fi

      # Upload IPA artifact
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-development-release
          path: ios/build/*.ipa
          retention-days: 30

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          security delete-keychain build.keychain || true
          rm -f certificate.p12 profile.plist profile.mobileprovision || true
          rm -f ios/exportOptions.plist embedded.plist embedded.mobileprovision || true

      # Success notification
      - name: Success Notification
        if: success()
        run: |
          echo "üéâ iOS Development Profile + Release IPA Build Completed Successfully!"
          echo "üì± Bundle ID: ${{ secrets.APPLE_BUNDLE_ID }}"
          echo "üë• Team ID: ${{ secrets.APPLE_TEAM_ID }}"
          echo "üîß Build Type: Release with Development Profile"
          echo "‚úÖ IPA can be installed directly on devices via InstallOnAir"
          echo "üí° Note: This uses Development profile for installation + Release build for performance"

      # Failure notification
      - name: Failure Notification
        if: failure()
        run: |
          echo "‚ùå Build failed!"
          echo "Common issues:"
          echo "1. Make sure DEVELOPMENT profile includes target devices"
          echo "2. Verify bundle ID matches exactly in development profile"
          echo "3. Ensure development certificate is not expired"
          echo "4. Check if development profile is properly configured"
