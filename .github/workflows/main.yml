name: React Native iOS Development Build

on:
  push:
    branches:
      - main
      - develop
  pull_request:

jobs:
  ios-development-build:
    name: Build Development IPA
    runs-on: macos-latest
    env:
      NODE_VERSION: '20'

    steps:
      # Clean derived data
      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/CocoaPods

      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install npm dependencies
      - name: Install npm dependencies
        run: npm install

      # Install CocoaPods
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod --version

      # Install CocoaPods dependencies
      - name: Install Pods
        run: |
          cd ios
          pod install --repo-update

      # Fix Bundle Identifier in Xcode Project
      - name: Fix Bundle Identifier in Xcode Project
        env:
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cd ios
          echo "🔧 Setting bundle identifier: $BUNDLE_ID"
          
          # Use sed to update bundle identifier in project file
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = \"$BUNDLE_ID\";/g" cicddemo.xcodeproj/project.pbxproj || \
          sed -i '' "/buildSettings = {/,/};/s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = \"$BUNDLE_ID\";/g" cicddemo.xcodeproj/project.pbxproj
          
          echo "✅ Bundle identifier set"

      # List available certificates before setup
      - name: List Available Certificates
        run: |
          echo "🔍 Checking existing certificates..."
          security find-identity -p codesigning -v

      # Setup development code signing with better error handling
      - name: Setup Development Code Signing
        env:
          IOS_DEVELOPMENT_PROFILE_BASE64: ${{ secrets.IOS_DEVELOPMENT_PROFILE_BASE64 }}
          IOS_DEVELOPMENT_CERTIFICATE_BASE64: ${{ secrets.IOS_DEVELOPMENT_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail

          echo "🔐 Creating build keychain..."
          security create-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 build.keychain

          echo "📦 Importing development certificate..."
          echo "$IOS_DEVELOPMENT_CERTIFICATE_BASE64" | base64 --decode > development_certificate.p12
          security import development_certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign

          echo "🔧 Setting key partition list..."
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$IOS_CERTIFICATE_PASSWORD" build.keychain

          echo "📱 Importing development provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$IOS_DEVELOPMENT_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/build.mobileprovision

          echo "📋 Extracting provisioning profile info..."
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/build.mobileprovision > profile.plist
          
          # Extract profile information
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" profile.plist)
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" profile.plist)
          TEAM_ID=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:com.apple.developer.team-identifier" profile.plist)
          BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" profile.plist | sed "s/^$TEAM_ID\.//")
          
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
          echo "PROFILE_TEAM_ID=$TEAM_ID" >> $GITHUB_ENV
          echo "PROFILE_BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          
          echo "✅ Development code signing setup complete"
          echo "📝 Profile Name: $PROFILE_NAME"
          echo "🔑 Profile UUID: $PROFILE_UUID"
          echo "👥 Team ID: $TEAM_ID"
          echo "📱 Bundle ID: $BUNDLE_ID"

          # List certificates to verify import
          echo "🔍 Verifying certificate import..."
          security find-identity -p codesigning -v build.keychain

      # Fix React Native script phases to avoid warnings
      - name: Fix React Native Script Phases
        run: |
          cd ios
          echo "🔧 Disabling dependency analysis for React Native script phases..."
          
          # This reduces build warnings but doesn't affect functionality
          # The warnings are harmless but can be fixed in the Xcode project if needed
          echo "ℹ️ React Native script phase warnings are normal and can be ignored"

      # Create development export options plist
      - name: Create development exportOptions.plist
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cat > ios/exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>method</key>
              <string>development</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROFILE_UUID</string>
              </dict>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <false/>
              <key>iCloudContainerEnvironment</key>
              <string>Development</string>
          </dict>
          </plist>
          EOF

      # Build iOS app for development with better error handling
      - name: Build iOS Development App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cd ios
          
          echo "🏗️  Cleaning build directory..."
          xcodebuild clean -workspace cicddemo.xcworkspace -scheme cicddemo -configuration Debug
          
          echo "🔍 Verifying code signing setup..."
          # Check if profile and certificate match
          security find-identity -p codesigning -v build.keychain
          echo "Provisioning profile UUID: $PROFILE_UUID"
          echo "Provisioning profile name: $PROFILE_NAME"
          
          echo "🚀 Building archive for development..."
          # Build with development configuration - using profile specifier instead of UUID
          xcodebuild archive \
            -workspace cicddemo.xcworkspace \
            -scheme cicddemo \
            -configuration Debug \
            -destination "generic/platform=iOS" \
            -archivePath build/cicddemo.xcarchive \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            CODE_SIGN_STYLE="Manual" \
            CURRENT_PROJECT_VERSION=1 \
            MARKETING_VERSION=1.0 \
            ENABLE_BITCODE=NO \
            SKIP_INSTALL=NO \
            BUILD_LIBRARY_FOR_DISTRIBUTION=NO \
            OTHER_CODE_SIGN_FLAGS="--keychain build.keychain"
          
          # Check if archive was created successfully
          if [ -d "build/cicddemo.xcarchive" ]; then
            echo "✅ Development archive created successfully!"
          else
            echo "❌ Archive creation failed!"
            exit 1
          fi

      # Export Development IPA
      - name: Export Development IPA
        run: |
          cd ios
          
          echo "📦 Exporting Development IPA..."
          xcodebuild -exportArchive \
            -archivePath build/cicddemo.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build \
            -allowProvisioningUpdates
          
          echo "✅ Development export completed"
          
          # Check for IPA
          if compgen -G "build/*.ipa" > /dev/null; then
            IPA_FILE=$(ls build/*.ipa)
            echo "🎉 Development IPA created: $IPA_FILE"
            ls -la "$IPA_FILE"
          else
            echo "❌ IPA not found!"
            echo "Build directory contents:"
            ls -la build/
            exit 1
          fi

      # Upload IPA artifact
      - name: Upload Development IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-development
          path: ios/build/*.ipa
          retention-days: 30

      # Generate installation instructions
      - name: Generate Installation Instructions
        run: |
          echo "📲 INSTALLATION INSTRUCTIONS:" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 How to Install on iOS Device" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo "1. **Download the IPA** from the artifacts above" >> $GITHUB_STEP_SUMMARY
          echo "2. **Install on your device** using one of these methods:" >> $GITHUB_STEP_SUMMARY
          echo "   - **AltServer**: Use AltServer with macOS/Windows" >> $GITHUB_STEP_SUMMARY
          echo "   - **Cydia Impactor**: Traditional sideloading method" >> $GITHUB_STEP_SUMMARY
          echo "   - **Third-party services**: Services like Diawi or AppCenter" >> $GITHUB_STEP_SUMMARY
          echo "3. **Trust the developer**: Go to Settings → General → Device Management → Trust the developer certificate" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo "**Note**: This is a development build and will expire in 7 days (unless using a paid developer account)" >> $GITHUB_STEP_SUMMARY

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          security delete-keychain build.keychain || true
          rm -f development_certificate.p12 profile.plist || true

      # Success notification
      - name: Success Notification
        if: success()
        run: |
          echo "🎉 iOS Development IPA Build Completed Successfully!"
          echo "📱 Bundle ID: ${{ secrets.APPLE_BUNDLE_ID }}"
          echo "👥 Team ID: ${{ secrets.APPLE_TEAM_ID }}"
          echo "📝 Profile Name: $PROFILE_NAME"
          echo "✅ Development IPA is available in the artifacts section"
