name: React Native iOS Development Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ios-development-build:
    name: Build Development IPA
    runs-on: macos-latest
    env:
      NODE_VERSION: '20'

    steps:
      # Clean derived data
      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/CocoaPods

      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install npm dependencies
      - name: Install npm dependencies
        run: npm install

      # Install CocoaPods
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod --version

      # Install CocoaPods dependencies
      - name: Install Pods
        run: |
          cd ios
          pod install --repo-update

      # Fix Hermes warning by setting HERMES_ENABLED
      - name: Configure Hermes for Development
        run: |
          cd ios
          # Set Hermes to false for development to avoid build issues
          sed -i '' 's/hermes_enabled => false/hermes_enabled => true/g' Podfile || true
          # Reinstall pods with Hermes configuration
          pod install

      # Decode Development Provisioning Profile
      - name: Decode Development Provisioning Profile
        env:
          IOS_DEVELOPMENT_PROFILE_BASE64: ${{ secrets.IOS_DEVELOPMENT_PROFILE_BASE64 }}
          APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
        run: |
          echo "📋 Decoding development provisioning profile..."
          echo "$IOS_DEVELOPMENT_PROFILE_BASE64" | base64 --decode > dev_profile.mobileprovision
          security cms -D -i dev_profile.mobileprovision > dev_profile.plist
          DEV_PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" dev_profile.plist)
          DEV_PROFILE_TEAM_ID=$(/usr/libexec/PlistBuddy -c "Print :TeamIdentifier:0" dev_profile.plist)
          echo "DEV_PROFILE_UUID=$DEV_PROFILE_UUID" >> $GITHUB_ENV
          echo "DEV_PROFILE_TEAM_ID=$DEV_PROFILE_TEAM_ID" >> $GITHUB_ENV
          echo "✅ Development Profile UUID: $DEV_PROFILE_UUID"
          echo "✅ Team ID from Profile: $DEV_PROFILE_TEAM_ID"

      # Setup Development Code Signing PROPERLY
      - name: Setup Development Code Signing
        env:
          IOS_DEVELOPMENT_CERTIFICATE_BASE64: ${{ secrets.IOS_DEVELOPMENT_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: |
          set -euo pipefail

          echo "🔐 Setting up development code signing..."
          
          # Delete existing keychain if any
          security delete-keychain dev.keychain || true
          
          # Create new keychain
          security create-keychain -p "$IOS_CERTIFICATE_PASSWORD" dev.keychain
          security default-keychain -s dev.keychain
          security unlock-keychain -p "$IOS_CERTIFICATE_PASSWORD" dev.keychain
          security set-keychain-settings -t 3600 -u dev.keychain

          # Import DEVELOPMENT certificate
          echo "📦 Importing development certificate..."
          echo "$IOS_DEVELOPMENT_CERTIFICATE_BASE64" | base64 --decode > dev_certificate.p12
          security import dev_certificate.p12 -k dev.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign

          # Configure keychain properly
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$IOS_CERTIFICATE_PASSWORD" dev.keychain
          security list-keychains -s dev.keychain

          # Verify certificate
          echo "🔍 Verifying certificate..."
          security find-identity -v -p codesigning dev.keychain

      # Install Development Profile
      - name: Install Development Provisioning Profile
        run: |
          echo "📱 Installing development provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp dev_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$DEV_PROFILE_UUID.mobileprovision"
          echo "✅ Development profile installed"

      # Fix Bundle Identifier in Xcode project
      - name: Fix Bundle Identifier
        env:
          APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
          APP_TEAM_ID: ${{ secrets.APP_TEAM_ID }}
        run: |
          cd ios
          echo "🔧 Fixing bundle identifier: $APP_BUNDLE_ID"
          
          # Use PlistBuddy to set bundle identifier in project.pbxproj
          /usr/libexec/PlistBuddy -c "Set :objects:$(grep -n "PRODUCT_BUNDLE_IDENTIFIER" cicddemo.xcodeproj/project.pbxproj | head -1 | cut -d: -f1 | xargs -I {} sed -n '{},/{/p' cicddemo.xcodeproj/project.pbxproj | grep "isa = PBXNativeTarget" -B10 | grep -o "[A-F0-9]*" | head -1):buildSettings:PRODUCT_BUNDLE_IDENTIFIER $APP_BUNDLE_ID" cicddemo.xcodeproj/project.pbxproj 2>/dev/null || \
          echo "Using alternative method..."
          
          # Alternative method using sed
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = .*;/PRODUCT_BUNDLE_IDENTIFIER = \"$APP_BUNDLE_ID\";/g" cicddemo.xcodeproj/project.pbxproj
          sed -i '' "s/DEVELOPMENT_TEAM = .*;/DEVELOPMENT_TEAM = \"$APP_TEAM_ID\";/g" cicddemo.xcodeproj/project.pbxproj

      # Create Development Export Options
      - name: Create Development Export Options
        env:
          APP_TEAM_ID: ${{ secrets.APP_TEAM_ID }}
          APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
        run: |
          cat > ios/exportOptions_dev.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>method</key>
              <string>development</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>teamID</key>
              <string>$APP_TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$APP_BUNDLE_ID</key>
                  <string>$DEV_PROFILE_UUID</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Development</string>
              <key>uploadBitcode</key>
              <false/>
          </dict>
          </plist>
          EOF

      # Build Development Archive with PROPER settings
      - name: Build Development Archive
        env:
          APP_TEAM_ID: ${{ secrets.APP_TEAM_ID }}
          APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
        run: |
          cd ios
          
          echo "🏗️  Cleaning for development build..."
          xcodebuild clean -workspace cicddemo.xcworkspace -scheme cicddemo -configuration Debug
          
          echo "🔍 Verifying code signing setup..."
          security find-identity -v -p codesigning dev.keychain
          
          echo "🚀 Building development archive (Debug configuration)..."
          xcodebuild archive \
            -workspace cicddemo.xcworkspace \
            -scheme cicddemo \
            -configuration Debug \
            -destination "generic/platform=iOS" \
            -archivePath build/Dev/cicddemo.xcarchive \
            DEVELOPMENT_TEAM="$APP_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$APP_BUNDLE_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$DEV_PROFILE_UUID" \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_IDENTITY="Apple Development" \
            CURRENT_PROJECT_VERSION=1 \
            MARKETING_VERSION=1.0.0 \
            CODE_SIGNING_REQUIRED=YES \
            CODE_SIGNING_ALLOWED=YES \
            HERMES_ENABLED=1
          
          echo "✅ Development archive created"

      # Export Development IPA
      - name: Export Development IPA
        run: |
          cd ios
          
          echo "📦 Exporting development IPA..."
          xcodebuild -exportArchive \
            -archivePath build/Dev/cicddemo.xcarchive \
            -exportOptionsPlist exportOptions_dev.plist \
            -exportPath build/Dev \
            -allowProvisioningUpdates
          
          echo "✅ Development IPA exported"

      # Verify IPA
      - name: Verify Development IPA
        run: |
          cd ios
          
          echo "🔍 Verifying development IPA..."
          if compgen -G "build/Dev/*.ipa" > /dev/null; then
            IPA_FILE=$(ls build/Dev/*.ipa)
            echo "✅ Development IPA created successfully: $IPA_FILE"
            echo "📊 Size: $(wc -c < "$IPA_FILE") bytes"
            
            # Basic validation
            unzip -l "$IPA_FILE" | head -10
          else
            echo "❌ Development IPA not found"
            echo "Build directory contents:"
            ls -la build/Dev/
            exit 1
          fi

      # Upload Development IPA
      - name: Upload Development IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-development-app
          path: ios/build/Dev/*.ipa
          retention-days: 30

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          security delete-keychain dev.keychain || true
          rm -f dev_certificate.p12 dev_profile.mobileprovision dev_profile.plist || true
          rm -f ios/exportOptions_dev.plist || true

      # Success notification
      - name: Success Notification
        if: success()
        run: |
          echo "🎉 Development IPA Build Completed Successfully!"
          echo "📱 This IPA can be installed via InstallOnAir, Diawi, etc."
          echo "📦 Bundle ID: ${{ secrets.APP_BUNDLE_ID }}"
          echo "👥 Team ID: ${{ secrets.APP_TEAM_ID }}"
